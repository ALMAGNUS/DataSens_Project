name: CI/CD DataSens

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Tests & Validation
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🧪 Run tests
      run: |
        # Validation imports
        python -c "import pandas; import minio; import sqlalchemy; print('✅ Imports OK')"
        
    - name: ✅ Validate .env template
      run: |
        if [ ! -f .env ]; then
          echo "❌ Fichier .env manquant"
          exit 1
        fi
        echo "✅ Configuration OK"

  # Job 2: Docker Build & Test
  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 🐳 Start Docker services
      run: |
        docker-compose up -d
        sleep 10
    
    - name: 🔍 Check services health
      run: |
        docker-compose ps
        
        # Test MinIO
        curl -f http://localhost:9000/minio/health/live || exit 1
        echo "✅ MinIO OK"
        
        # Test PostgreSQL
        docker-compose exec -T postgres pg_isready -U ds_user || exit 1
        echo "✅ PostgreSQL OK"
        
        # Test Redis
        docker-compose exec -T redis redis-cli ping || exit 1
        echo "✅ Redis OK"
    
    - name: 🛑 Stop services
      run: docker-compose down -v

  # Job 3: Notebook Validation
  notebook:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install nbconvert nbformat
    
    - name: 📓 Validate notebooks
      run: |
        # Vérifier la syntaxe des notebooks
        python -c "
import nbformat
notebooks = ['datasens_E1_v1.ipynb', 'datasens_E1_v2.ipynb']
for nb_path in notebooks:
    try:
        nb = nbformat.read(nb_path, as_version=4)
        print(f'✅ {nb_path} valide')
    except Exception as e:
        print(f'❌ {nb_path} invalide: {e}')
        exit(1)
"

  # Job 4: Documentation
  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 📚 Check documentation
      run: |
        if [ ! -f README.md ]; then
          echo "❌ README.md manquant"
          exit 1
        fi
        
        if [ ! -f docker-compose.yml ]; then
          echo "❌ docker-compose.yml manquant"
          exit 1
        fi
        
        echo "✅ Documentation complète"
